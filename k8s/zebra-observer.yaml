apiVersion: apps/v1
kind: Deployment
metadata:
  name: zebra-observer
  labels:
    app: zebra
    component: observer
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: zebra
      component: observer
  template:
    metadata:
      labels:
        app: zebra
        component: observer
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
    spec:
      # Prefer scheduling across nodes
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: app
                    operator: In
                    values:
                      - zebra
              topologyKey: "kubernetes.io/hostname"
      containers:
        - name: observer
          image: ghcr.io/your-org/zebra-observer:latest
          imagePullPolicy: IfNotPresent
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "2Gi"
              cpu: "2000m"
          livenessProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /ready
              port: 8080
            initialDelaySeconds: 5
            periodSeconds: 5
          env:
            - name: OTEL_EXPORTER_OTLP_ENDPOINT
              value: "http://otel-collector.observability.svc.cluster.local:4317"
            - name: CAUSAL_INFERENCE_WORKERS
              value: "4"
            - name: SIGNIFICANCE_LEVEL
              value: "0.05"
          ports:
            - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: zebra-observer
  labels:
    app: zebra
    component: observer
spec:
  type: ClusterIP
  selector:
    app: zebra
    component: observer
  ports:
    - port: 80
      targetPort: 8080
      name: http
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: zebra-observer-pdb
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: zebra
      component: observer
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: zebra-observer-hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: zebra-observer
  minReplicas: 3
  maxReplicas: 10
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80
    # For custom queue length metric you need Prometheus Adapter or use KEDA as alternative:
    - type: Pods
      pods:
        metric:
          name: causal_analysis_queue_length
        target:
          type: AverageValue
          averageValue: "100"