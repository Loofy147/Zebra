name: CI

on: [push, pull_request]

jobs:
  lint-and-unit-test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: zebra
          POSTGRES_PASSWORD: zebra
        ports: ['5432:5432']
        options: >-
          --health-cmd="pg_isready -U zebra" --health-interval=10s --health-timeout=5s --health-retries=5
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install base deps
        run: |
          python -m pip install -U pip
          pip install -r requirements.txt
          pip install -r requirements-integration.txt
      - name: Lint & Typecheck
        run: |
          pip install black ruff mypy
          ruff .
          black --check .
          mypy src --ignore-missing-imports
      - name: Run unit tests
        run: |
          pip install pytest
          pytest -q tests/

  integration-heavy-deps:
    runs-on: ubuntu-latest
    needs: lint-and-unit-test
    if: github.event_name == 'push' || contains(github.event.pull_request.labels.*.name, 'run-heavy-tests')
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: zebra
          POSTGRES_PASSWORD: zebra
        ports: ['5432:5432']
        options: >-
          --health-cmd="pg_isready -U zebra" --health-interval=10s --health-timeout=5s --health-retries=5
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install all dependencies
        run: |
          python -m pip install -U pip
          pip install -r requirements.txt
          pip install -r requirements-governance.txt
          pip install -r requirements-integration.txt
          # Add other heavy requirements files here if any
      - name: Run all tests
        run: |
          pip install pytest
          pytest -q
      - name: Build docker images
        run: |
          docker compose -f docker-compose.yml build --parallel